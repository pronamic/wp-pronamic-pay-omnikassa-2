os: linux
dist: xenial
language: php

services:
  - mysql

env:
  global:
    - COMPOSER_NO_INTERACTION=1
    - WP_VERSION=*

_php_job: &php_job
  before_install:
    # Create database for PHPUnit tests.
    - mysql -e 'CREATE DATABASE wp_phpunit_tests;'
    # Remove Xdebug for a huge performance increase:
    - |
      if [[ "$COVERAGE" != "1" && -f ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini ]]; then
        phpenv config-rm xdebug.ini
      fi
    # Set Xdebug mode for coverage.
    - export XDEBUG_MODE=coverage
    # Raise PHP memory limit to 2048MB
    - echo 'memory_limit = 2048M' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    # Update Composer itself to the latest version (https://getcomposer.org/doc/03-cli.md#self-update-selfupdate-).
    - composer self-update
    # Validate composer.json file.
    - composer validate --strict
    # Add Composer global vendor/bin to path.
    - export PATH="$HOME/.composer/vendor/bin:$PATH"
    # PHP_CodeSniffer - Slevomat Coding Standard requires PHP ^7.1.
    - if [ "$PHPCS" != "1" ]; then composer remove slevomat/coding-standard --dev --no-update; fi
    # Symfony Security Check
    - if [ "$SYMFONY_SECURITY_CHECK" == "1" ]; then curl -sS https://get.symfony.com/cli/installer | bash; fi
    - if [ "$SYMFONY_SECURITY_CHECK" == "1" ]; then export PATH="$HOME/.symfony/bin:$PATH"; fi

  install:
    # Install Composer packages.
    - composer install
    # PHPStan
    - if [ "$PHPSTAN" == "1" ]; then composer bin phpstan install; fi
    # Psalm
    - if [ "$PSALM" == "1" ]; then composer bin psalm install; fi
    # Test on specific WordPress version.
    - composer require --dev --update-with-dependencies roots/wordpress:${WP_VERSION} wp-phpunit/wp-phpunit:${WP_VERSION}
    # List available packages.
    - composer show

  script:
    # PHPLint
    - composer run-script phplint
    # PHPUnit
    - composer run-script phpunit
    # PHP_CodeSniffer
    - if [ "$PHPCS" == "1" ]; then composer run-script phpcs; fi
    # PHP Mess Detector
    - if [ "$PHPMD" == "1" ]; then composer run-script phpmd; fi
    # PHPStan
    - if [ "$PHPSTAN" == "1" ]; then composer run-script phpstan; fi
    # Psalm
    - if [ "$PSALM" == "1" ]; then composer run-script psalm; fi
    # Symfony Security Check
    - if [ "$SYMFONY_SECURITY_CHECK" == "1" ]; then symfony security:check; fi

  after_success:
    - if [ "$COVERAGE" == "1" ]; then composer run-script coveralls; fi
    - if [ "$COVERAGE" == "1" ]; then bash <(curl -s https://codecov.io/bash); fi

jobs:
  include:
    - php: 7.4
      env: WP_VERSION=^5.5 COVERAGE=1 PHPCS=1 SYMFONY_SECURITY_CHECK=1 PHPSTAN=1 PSALM=1
      <<: *php_job
    - php: 7.4
      env: WP_VERSION=^5.4
      <<: *php_job
    - php: 7.4
      env: WP_VERSION=^5.3
      <<: *php_job
    # WordPress 5.2 (or lower) will trigger PHP 7.4 (or higher) errors.
    # @link https://make.wordpress.org/core/2019/10/11/wordpress-and-php-7-4/.
    - php: 7.3
      env: WP_VERSION=^5.2
      <<: *php_job
    - php: 7.3
      env: WP_VERSION=^5.1
      <<: *php_job
    - php: 7.3
      env: WP_VERSION=^5.0
      <<: *php_job
    - php: 7.3
      env: WP_VERSION=^4.9
      <<: *php_job
    # WordPress 4.8 (or lower) will trigger PHP 7.2 (or higher) errors.
    # @link https://make.wordpress.org/core/2018/10/15/wordpress-and-php-7-3/
    # @link https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/
    # @link https://make.wordpress.org/core/tag/4-9/?s=7.2
    - php: 7.2
      env: WP_VERSION=^4.8
      <<: *php_job
    - php: 7.2
      env: WP_VERSION=^4.7
      <<: *php_job
    - php: 7.3
      env: WP_MULTISITE=1
      <<: *php_job
    - php: 7.3
      env: PHPMD=1
      <<: *php_job
    - php: 7.2
      <<: *php_job
    - php: 7.1
      <<: *php_job
    - php: 7.0
      <<: *php_job
    - php: 5.6
      <<: *php_job
    - php: nightly
      <<: *php_job
    - language: node_js
      node_js: 12
      script:
      - npm install
      # ESLint
      - npm run-script eslint
  allow_failures:
    - php: nightly
    - env: PHPMD=1

cache:
  directories:
    - node_modules
    - vendor
    - $HOME/.composer/cache
